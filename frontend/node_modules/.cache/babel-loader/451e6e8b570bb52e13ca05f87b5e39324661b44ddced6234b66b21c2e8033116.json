{"ast":null,"code":"var _jsxFileName = \"/Users/philipp/Documents/intership-projects-2025-main/frontend/src/features/Navbar.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Navbar({\n  setAvgScore\n}) {\n  _s();\n  //State for loading\n  const [isLoading, setIsLoading] = useState(false);\n  const handleClick = async () => {\n    //Get Doc ID\n    const selectionSoftwareProductDocumentId = localStorage.getItem(\"selectionSoftwareProductDocumentId\");\n    try {\n      setIsLoading(true);\n      console.log(\"Start AI\");\n      await fetch(\"http://localhost:5001/api/contract-checker/post-contractAiStart\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          selectionSoftwareProductDocumentId: selectionSoftwareProductDocumentId\n        })\n      });\n\n      // Get AVG score via QueryString, Run once\n\n      const AvgScoreUrl = `http://localhost:5001/api/contract-checker/get-contractAvgScore?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n      const response = await fetch(AvgScoreUrl, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.text();\n      //Update State\n      setAvgScore(parseFloat(data));\n      console.log(data);\n    } catch (error) {\n      console.log(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n      console.log(\"Done\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"bg-white h-16 flex items-center justify-between px-4 border-b-2 border-primary2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-row items-center gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"font-sans text-sm\",\n        children: \"Date created: 3.3.2025\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"font-sans text-sm\",\n        children: \"contract.pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        disabled: isLoading,\n        className: `${isLoading ? 'bg-gray-400' : 'bg-black'} w-48 h-10 rounded-lg text-white font-sans`,\n        children: \"Ai Analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(Navbar, \"EmvgwIb3cHpoFpeP+WmEDbjx4y4=\");\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Navbar","setAvgScore","_s","isLoading","setIsLoading","handleClick","selectionSoftwareProductDocumentId","localStorage","getItem","console","log","fetch","method","headers","body","JSON","stringify","AvgScoreUrl","response","data","text","parseFloat","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/philipp/Documents/intership-projects-2025-main/frontend/src/features/Navbar.tsx"],"sourcesContent":["import { useState } from 'react';\n\n\n\n\n\ninterface NavbarProps {\n    setAvgScore: (score: number) => void;\n  }\n\n  \nfunction Navbar ({ setAvgScore }: NavbarProps) {\n\n    //State for loading\n    const [isLoading, setIsLoading] =  useState(false);\n\n\n\n    const handleClick = async () => {\n\n        //Get Doc ID\n        const selectionSoftwareProductDocumentId = localStorage.getItem(\"selectionSoftwareProductDocumentId\");\n        \n        \n        try {\n            setIsLoading(true);\n            console.log(\"Start AI\")\n            await fetch(\"http://localhost:5001/api/contract-checker/post-contractAiStart\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ selectionSoftwareProductDocumentId: selectionSoftwareProductDocumentId }),\n              });\n            \n        \n\n\n            \n            // Get AVG score via QueryString, Run once\n         \n        \n            const AvgScoreUrl = `http://localhost:5001/api/contract-checker/get-contractAvgScore?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    \n            const response = await fetch(AvgScoreUrl, {\n                method: \"GET\",\n                headers: {\n                \"Content-Type\": \"application/json\",\n                },\n            })\n            const data = await response.text();\n            //Update State\n            setAvgScore(parseFloat(data));\n            console.log(data);\n           \n            \n\n       \n        } catch (error) {\n\n            console.log(\"Error:\", error)\n\n        } finally {\n            setIsLoading(false)\n            console.log(\"Done\")\n        }\n\n    };\n    \n\n\n    return (\n        <nav className=\"bg-white h-16 flex items-center justify-between px-4 border-b-2 border-primary2\">\n            <div className=\"flex flex-row items-center gap-6\">\n                <h2 className=\"font-sans text-sm\">Date created: 3.3.2025</h2>\n                <h2 className=\"font-sans text-sm\">contract.pdf</h2>\n            </div>\n            <div>\n                <button onClick={handleClick} disabled={isLoading} className={`${isLoading ? 'bg-gray-400' : 'bg-black'} w-48 h-10 rounded-lg text-white font-sans`}>Ai Analyze</button>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWjC,SAASC,MAAMA,CAAE;EAAEC;AAAyB,CAAC,EAAE;EAAAC,EAAA;EAE3C;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAIP,QAAQ,CAAC,KAAK,CAAC;EAIlD,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;IAE5B;IACA,MAAMC,kCAAkC,GAAGC,YAAY,CAACC,OAAO,CAAC,oCAAoC,CAAC;IAGrG,IAAI;MACAJ,YAAY,CAAC,IAAI,CAAC;MAClBK,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvB,MAAMC,KAAK,CAAC,iEAAiE,EAAE;QAC3EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEV,kCAAkC,EAAEA;QAAmC,CAAC;MACjG,CAAC,CAAC;;MAMJ;;MAGA,MAAMW,WAAW,GAAG,sGAAsGX,kCAAkC,EAAE;MAE9J,MAAMY,QAAQ,GAAG,MAAMP,KAAK,CAACM,WAAW,EAAE;QACtCL,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACT,cAAc,EAAE;QAChB;MACJ,CAAC,CAAC;MACF,MAAMM,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC;MACAnB,WAAW,CAACoB,UAAU,CAACF,IAAI,CAAC,CAAC;MAC7BV,OAAO,CAACC,GAAG,CAACS,IAAI,CAAC;IAKrB,CAAC,CAAC,OAAOG,KAAK,EAAE;MAEZb,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEY,KAAK,CAAC;IAEhC,CAAC,SAAS;MACNlB,YAAY,CAAC,KAAK,CAAC;MACnBK,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACvB;EAEJ,CAAC;EAID,oBACIX,OAAA;IAAKwB,SAAS,EAAC,iFAAiF;IAAAC,QAAA,gBAC5FzB,OAAA;MAAKwB,SAAS,EAAC,kCAAkC;MAAAC,QAAA,gBAC7CzB,OAAA;QAAIwB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7D7B,OAAA;QAAIwB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACN7B,OAAA;MAAAyB,QAAA,eACIzB,OAAA;QAAQ8B,OAAO,EAAExB,WAAY;QAACyB,QAAQ,EAAE3B,SAAU;QAACoB,SAAS,EAAE,GAAGpB,SAAS,GAAG,aAAa,GAAG,UAAU,4CAA6C;QAAAqB,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC1B,EAAA,CAvEQF,MAAM;AAAA+B,EAAA,GAAN/B,MAAM;AAyEf,eAAeA,MAAM;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/philipp/Documents/intership-projects-2025-main/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ScheduleTable from './features/ScheduleTable';\nimport Header from './features/Header';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [availabilityEntries, setAvailabilityEntries] = useState([]);\n  const [dateRange, setDateRange] = useState([new Date('2024-08-01'), new Date('2024-09-29')]);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [showAddParticipantForm, setShowAddParticipantForm] = useState(false);\n  const [newParticipantName, setNewParticipantName] = useState('');\n  const [selectedDates, setSelectedDates] = useState([]);\n  const [filteredEntries, setFilteredEntries] = useState([]);\n  const [startDate, endDate] = dateRange;\n\n  // Fetch availability data when the component mounts\n  useEffect(() => {\n    getAvailabilities();\n  }, []);\n\n  // Filter entries based on the selected date range\n  useEffect(() => {\n    if (startDate && endDate) {\n      const filtered = availabilityEntries.filter(entry => {\n        const entryDate = new Date(entry.date + ' 2024');\n        return entryDate >= startDate && entryDate <= endDate;\n      });\n      setFilteredEntries(filtered);\n    }\n  }, [availabilityEntries, startDate, endDate]);\n\n  // Fetch availabilities from the backend\n  const getAvailabilities = async () => {\n    try {\n      const res = await fetch('http://localhost:5001/api/scheduling-manager/get-availabilities', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (res.ok) {\n        const data = await res.json();\n        setAvailabilityEntries(data.data);\n      } else {\n        console.error(`Error fetching availabilities: ${res.status}`);\n      }\n    } catch (error) {\n      console.error('Error fetching availabilities:', error);\n    }\n  };\n\n  // Handle adding a new participant and updating availabilities\n  const handleAddParticipantSubmit = async event => {\n    event.preventDefault();\n    if (!newParticipantName.trim() || availabilityEntries.some(entry => entry[newParticipantName] !== undefined)) {\n      return alert(\"Invalid or duplicate name\");\n    }\n    if (selectedDates.length === 0) {\n      return alert(\"Select at least one date\");\n    }\n\n    // Sort the selected dates before sending to backend\n    const sortedDates = [...selectedDates].sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n    const updatedEntries = addAvailabilityEntry(availabilityEntries, newParticipantName, sortedDates);\n    try {\n      const res = await fetch('http://localhost:5001/api/scheduling-manager/add-availabilities', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(updatedEntries)\n      });\n      if (res.ok) {\n        const data = await res.json();\n        console.log(\"Availabilities updated:\", data);\n\n        // Ensure that the entries are sorted by date when updating state\n        const sortedEntries = data.data.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n        // Update state with sorted entries\n        setAvailabilityEntries(sortedEntries);\n\n        // Reset form and close the pop-up\n        resetForm();\n      } else {\n        console.error(`Error adding availabilities: ${res.status}`);\n      }\n    } catch (error) {\n      console.error('Error adding availabilities:', error);\n    }\n  };\n\n  // Function to add availability entries\n  const addAvailabilityEntry = (entries, name, dates) => {\n    const updatedEntries = entries.map(entry => ({\n      ...entry\n    }));\n    const existingDates = entries.map(entry => entry.date);\n    dates.forEach(date => {\n      const formattedDate = formatDate(date); // Format the date to match the backend format\n      const dayOfWeek = date.toLocaleDateString(undefined, {\n        weekday: 'long'\n      });\n      if (existingDates.includes(formattedDate)) {\n        updatedEntries.forEach(entry => {\n          if (entry.date === formattedDate) {\n            entry[name] = true; // Add participant availability\n          }\n        });\n      } else {\n        const newEntry = createAvailabilityEntry(dayOfWeek, formattedDate, name, entries[0]);\n        updatedEntries.push(newEntry); // Add a new entry if the date doesn't exist\n      }\n    });\n\n    // Ensure all other participants' availability is set to false for the new dates\n    updatedEntries.forEach(entry => {\n      if (!dates.map(formatDate).includes(entry.date)) {\n        entry[name] = false;\n      }\n    });\n    return reorderAndSortEntries(updatedEntries, name); // Sort and return updated entries\n  };\n\n  // Function to create a new availability entry\n  const createAvailabilityEntry = (day, date, name, template) => {\n    const newEntry = {\n      id: uuidv4(),\n      day,\n      date,\n      [name]: true\n    };\n    Object.keys(template).forEach(key => {\n      if (key !== 'id' && key !== 'day' && key !== 'date' && key !== name) {\n        newEntry[key] = false;\n      }\n    });\n    return newEntry;\n  };\n\n  // Function to reorder and sort entries\n  const reorderAndSortEntries = (entries, name) => {\n    return entries.map(entry => ({\n      id: entry.id,\n      day: entry.day,\n      date: entry.date,\n      ...Object.fromEntries(Object.entries(entry).filter(([key]) => key !== 'id' && key !== 'day' && key !== 'date' && key !== name)),\n      [name]: entry[name]\n    })).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  };\n\n  // Function to format date\n  const formatDate = date => {\n    return date.toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    }).toUpperCase();\n  };\n\n  // Function to reset the form after adding a participant\n  const resetForm = () => {\n    setNewParticipantName('');\n    setSelectedDates([]);\n    setShowAddParticipantForm(false);\n  };\n\n  // Handle the date selection in the date picker\n  const handleDateChange = date => {\n    if (date) {\n      setSelectedDates(prevDates => prevDates.some(d => d.getTime() === date.getTime()) ? prevDates.filter(d => d.getTime() !== date.getTime()) : [...prevDates, date]);\n    }\n  };\n\n  // Handle applying the date range\n  const handleApplyDateRange = () => {\n    setShowDatePicker(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAddParticipant: () => setShowAddParticipantForm(true),\n      onShowDatePicker: () => setShowDatePicker(true),\n      dateRange: dateRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), showDatePicker && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg flex flex-col items-center\",\n        children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n          selectsRange: true,\n          startDate: startDate,\n          endDate: endDate,\n          onChange: update => setDateRange(update),\n          inline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleApplyDateRange,\n          className: \"mt-3 bg-primary text-white py-2 px-4 rounded-md\",\n          children: \"Apply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), showAddParticipantForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleAddParticipantSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newParticipantName,\n            onChange: e => setNewParticipantName(e.target.value),\n            placeholder: \"Participant name\",\n            className: \"border border-secondary6 py-1 px-2 rounded-md\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: selectedDates[0],\n              onChange: handleDateChange,\n              inline: true,\n              dayClassName: date => selectedDates.some(d => d.getTime() === date.getTime()) ? 'bg-primary text-white rounded-full' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"mt-3 bg-primary text-white py-2 px-4 rounded-md\",\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ScheduleTable, {\n      data: filteredEntries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"yaMEYXMRcY50u7OYO3VChx4Zzbk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ScheduleTable","Header","DatePicker","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","availabilityEntries","setAvailabilityEntries","dateRange","setDateRange","Date","showDatePicker","setShowDatePicker","showAddParticipantForm","setShowAddParticipantForm","newParticipantName","setNewParticipantName","selectedDates","setSelectedDates","filteredEntries","setFilteredEntries","startDate","endDate","getAvailabilities","filtered","filter","entry","entryDate","date","res","fetch","method","headers","credentials","ok","data","json","console","error","status","handleAddParticipantSubmit","event","preventDefault","trim","some","undefined","alert","length","sortedDates","sort","a","b","getTime","updatedEntries","addAvailabilityEntry","body","JSON","stringify","log","sortedEntries","resetForm","entries","name","dates","map","existingDates","forEach","formattedDate","formatDate","dayOfWeek","toLocaleDateString","weekday","includes","newEntry","createAvailabilityEntry","push","reorderAndSortEntries","day","template","id","Object","keys","key","fromEntries","month","year","toUpperCase","handleDateChange","prevDates","d","handleApplyDateRange","className","children","onAddParticipant","onShowDatePicker","fileName","_jsxFileName","lineNumber","columnNumber","selectsRange","onChange","update","inline","onClick","onSubmit","type","value","e","target","placeholder","selected","dayClassName","_c","$RefreshReg$"],"sources":["/Users/philipp/Documents/intership-projects-2025-main/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ScheduleTable from './features/ScheduleTable';\nimport Header from './features/Header';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AvailabilityEntry } from './types';\n\nconst App: React.FC = () => {\n  const [availabilityEntries, setAvailabilityEntries] = useState<AvailabilityEntry[]>([]);\n  const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([new Date('2024-08-01'), new Date('2024-09-29')]);\n  const [showDatePicker, setShowDatePicker] = useState<boolean>(false);\n  const [showAddParticipantForm, setShowAddParticipantForm] = useState<boolean>(false);\n  const [newParticipantName, setNewParticipantName] = useState<string>('');\n  const [selectedDates, setSelectedDates] = useState<Date[]>([]);\n  const [filteredEntries, setFilteredEntries] = useState<AvailabilityEntry[]>([]);\n  const [startDate, endDate] = dateRange;\n\n  // Fetch availability data when the component mounts\n  useEffect(() => {\n    getAvailabilities();\n  }, []);\n\n  // Filter entries based on the selected date range\n  useEffect(() => {\n    if (startDate && endDate) {\n      const filtered = availabilityEntries.filter(entry => {\n        const entryDate = new Date(entry.date + ' 2024');\n        return entryDate >= startDate && entryDate <= endDate;\n      });\n      setFilteredEntries(filtered);\n    }\n  }, [availabilityEntries, startDate, endDate]);\n\n  // Fetch availabilities from the backend\n  const getAvailabilities = async () => {\n    try {\n      const res = await fetch('http://localhost:5001/api/scheduling-manager/get-availabilities', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      });\n\n      if (res.ok) {\n        const data = await res.json();\n        setAvailabilityEntries(data.data);\n      } else {\n        console.error(`Error fetching availabilities: ${res.status}`);\n      }\n    } catch (error) {\n      console.error('Error fetching availabilities:', error);\n    }\n  };\n\n  // Handle adding a new participant and updating availabilities\n  const handleAddParticipantSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n  \n    if (!newParticipantName.trim() || availabilityEntries.some(entry => entry[newParticipantName] !== undefined)) {\n      return alert(\"Invalid or duplicate name\");\n    }\n  \n    if (selectedDates.length === 0) {\n      return alert(\"Select at least one date\");\n    }\n  \n    // Sort the selected dates before sending to backend\n    const sortedDates = [...selectedDates].sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n  \n    const updatedEntries = addAvailabilityEntry(availabilityEntries, newParticipantName, sortedDates);\n  \n    try {\n      const res = await fetch('http://localhost:5001/api/scheduling-manager/add-availabilities', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(updatedEntries),\n      });\n  \n      if (res.ok) {\n        const data = await res.json();\n        console.log(\"Availabilities updated:\", data);\n  \n        // Ensure that the entries are sorted by date when updating state\n        const sortedEntries = data.data.sort((a: AvailabilityEntry, b: AvailabilityEntry) =>\n          new Date(a.date).getTime() - new Date(b.date).getTime()\n        );\n  \n        // Update state with sorted entries\n        setAvailabilityEntries(sortedEntries);\n  \n        // Reset form and close the pop-up\n        resetForm();\n      } else {\n        console.error(`Error adding availabilities: ${res.status}`);\n      }\n    } catch (error) {\n      console.error('Error adding availabilities:', error);\n    }\n  };\n  \n\n  // Function to add availability entries\n  const addAvailabilityEntry = (entries: AvailabilityEntry[], name: string, dates: Date[]): AvailabilityEntry[] => {\n    const updatedEntries = entries.map(entry => ({ ...entry }));\n    const existingDates = entries.map(entry => entry.date);\n\n    dates.forEach(date => {\n        const formattedDate = formatDate(date); // Format the date to match the backend format\n        const dayOfWeek = date.toLocaleDateString(undefined, { weekday: 'long' });\n\n        if (existingDates.includes(formattedDate)) {\n            updatedEntries.forEach(entry => {\n                if (entry.date === formattedDate) {\n                    entry[name] = true; // Add participant availability\n                }\n            });\n        } else {\n            const newEntry = createAvailabilityEntry(dayOfWeek, formattedDate, name, entries[0]);\n            updatedEntries.push(newEntry); // Add a new entry if the date doesn't exist\n        }\n    });\n\n    // Ensure all other participants' availability is set to false for the new dates\n    updatedEntries.forEach(entry => {\n        if (!dates.map(formatDate).includes(entry.date)) {\n            entry[name] = false;\n        }\n    });\n\n    return reorderAndSortEntries(updatedEntries, name); // Sort and return updated entries\n};\n\n\n  // Function to create a new availability entry\n  const createAvailabilityEntry = (day: string, date: string, name: string, template: AvailabilityEntry): AvailabilityEntry => {\n    const newEntry: AvailabilityEntry = { \n      id: uuidv4(),\n      day, \n      date, \n      [name]: true \n    };\n    Object.keys(template).forEach(key => {\n      if (key !== 'id' && key !== 'day' && key !== 'date' && key !== name) {\n        newEntry[key] = false;\n      }\n    });\n    return newEntry;\n  };\n\n  // Function to reorder and sort entries\n  const reorderAndSortEntries = (entries: AvailabilityEntry[], name: string): AvailabilityEntry[] => {\n    return entries\n      .map(entry => ({\n        id: entry.id,\n        day: entry.day,\n        date: entry.date,\n        ...Object.fromEntries(\n          Object.entries(entry).filter(([key]) => key !== 'id' && key !== 'day' && key !== 'date' && key !== name)\n        ),\n        [name]: entry[name]\n      }))\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  };\n\n  // Function to format date\n  const formatDate = (date: Date): string => {\n    return date.toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    }).toUpperCase();\n  };\n\n  // Function to reset the form after adding a participant\n  const resetForm = (): void => {\n    setNewParticipantName('');\n    setSelectedDates([]);\n    setShowAddParticipantForm(false);\n  };\n\n  // Handle the date selection in the date picker\n  const handleDateChange = (date: Date | null) => {\n    if (date) {\n      setSelectedDates(prevDates =>\n        prevDates.some(d => d.getTime() === date.getTime())\n          ? prevDates.filter(d => d.getTime() !== date.getTime())\n          : [...prevDates, date]\n      );\n    }\n  };\n\n  // Handle applying the date range\n  const handleApplyDateRange = (): void => {\n    setShowDatePicker(false);\n  };\n\n  return (\n    <div className=\"text-center\">\n      <Header\n        onAddParticipant={() => setShowAddParticipantForm(true)}\n        onShowDatePicker={() => setShowDatePicker(true)}\n        dateRange={dateRange as [Date, Date]} \n      />\n\n      {showDatePicker && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n          <div className=\"bg-white p-5 rounded-lg flex flex-col items-center\">\n            <DatePicker\n              selectsRange\n              startDate={startDate as Date} \n              endDate={endDate as Date} \n              onChange={(update) => setDateRange(update as [Date | null, Date | null])}\n              inline\n            />\n            <button\n              onClick={handleApplyDateRange}\n              className=\"mt-3 bg-primary text-white py-2 px-4 rounded-md\"\n            >\n              Apply\n            </button>\n          </div>\n        </div>\n      )}\n\n      {showAddParticipantForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n          <div className=\"bg-white p-5 rounded-lg\">\n            <form onSubmit={handleAddParticipantSubmit}>\n              <input\n                type=\"text\"\n                value={newParticipantName}\n                onChange={(e) => setNewParticipantName(e.target.value)}\n                placeholder=\"Participant name\"\n                className=\"border border-secondary6 py-1 px-2 rounded-md\"\n              />\n              <div className=\"mt-4\">\n                <DatePicker\n                  selected={selectedDates[0]}\n                  onChange={handleDateChange}\n                  inline\n                  dayClassName={(date) =>\n                    selectedDates.some(d => d.getTime() === date.getTime())\n                      ? 'bg-primary text-white rounded-full'\n                      : ''\n                  }\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"mt-3 bg-primary text-white py-2 px-4 rounded-md\"\n              >\n                Add\n              </button>\n            </form>\n          </div>\n        </div>\n      )}\n\n      <ScheduleTable data={filteredEntries} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
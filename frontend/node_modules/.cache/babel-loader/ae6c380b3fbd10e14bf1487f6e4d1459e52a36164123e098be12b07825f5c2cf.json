{"ast":null,"code":"var _jsxFileName = \"/Users/philipp/Documents/intership-projects-2025-main/frontend/src/features/Navbar.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Navbar({\n  setAvgScore,\n  setDate,\n  date,\n  setHasClicked,\n  hasClicked,\n  setIsLoading,\n  isLoading,\n  setAiResults,\n  setCounts,\n  setCountCat\n}) {\n  _s();\n  //Date standard Value\n  let dateValue = 'No date available';\n  if (date) {\n    dateValue = date;\n  }\n\n  //Get Doc ID\n  const selectionSoftwareProductDocumentId = localStorage.getItem(\"selectionSoftwareProductDocumentId\");\n\n  //GET Avg Score via Query String \n  const handleGetAvgScore = async () => {\n    const AvgScoreUrl = `http://localhost:5001/api/contract-checker/get-contractAvgScore?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    const responseAvg = await fetch(AvgScoreUrl, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await responseAvg.text();\n    //Update State\n    setAvgScore(parseFloat(data));\n    console.log(data);\n  };\n\n  //GET Count Catergories\n  const handleGetContractClasses = async () => {\n    //Variables for ✅, ❌, and ❓\n    let tick = 0;\n    let cross = 0;\n    let question = 0;\n    const ContractClassesUrl = `http://localhost:5001/api/contract-checker/get-contractClasses?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    try {\n      const ResponseContractClasses = await fetch(ContractClassesUrl, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const DataContractClassesText = await ResponseContractClasses.text();\n      const parsedData = JSON.parse(DataContractClassesText);\n      console.log(\"Parsed data:\", parsedData);\n\n      //Handle AI Results\n\n      // Create quotes object dynamically\n      const quotes = {};\n      parsedData.results.forEach((item, index) => {\n        quotes[`quote${index + 1}`] = {\n          quote: item.quote,\n          type: item.type,\n          category: item.category\n        };\n      });\n\n      // Helper function for safe retrieval\n      const getQuoteSafely = index => {\n        const quoteKey = `quote${index}`;\n        return quotes[quoteKey] ? `${quotes[quoteKey].type} ${quotes[quoteKey].quote}` : 'No data available';\n      };\n\n      // Now assign variables safely\n      const Compliance1 = getQuoteSafely(1);\n      const Exit1 = getQuoteSafely(2);\n      const Cost1 = getQuoteSafely(3);\n      const Sla1 = getQuoteSafely(4);\n      const Exit2 = getQuoteSafely(5);\n      const Cost2 = getQuoteSafely(6);\n      const ContractDuration1 = getQuoteSafely(7);\n      const Payment1 = getQuoteSafely(8);\n      const Compliance2 = getQuoteSafely(9);\n      const Scope1 = getQuoteSafely(10);\n      const DataSec1 = getQuoteSafely(11);\n      const ContractDuration2 = getQuoteSafely(12);\n      const Software1 = getQuoteSafely(13);\n      const Own1 = getQuoteSafely(14);\n      const Sla2 = getQuoteSafely(15);\n      const Scope2 = getQuoteSafely(16);\n      const DataSec2 = getQuoteSafely(17);\n      const Legal1 = getQuoteSafely(18);\n      const Legal2 = getQuoteSafely(19);\n      const Own2 = getQuoteSafely(20);\n      const Payment2 = getQuoteSafely(21);\n      const Software2 = getQuoteSafely(22);\n\n      //Set AI Result \n      setAiResults({\n        Compliance1,\n        Exit1,\n        Cost1,\n        Sla1,\n        Exit2,\n        Cost2,\n        ContractDuration1,\n        Payment1,\n        Compliance2,\n        Scope1,\n        DataSec1,\n        ContractDuration2,\n        Software1,\n        Own1,\n        Sla2,\n        Scope2,\n        DataSec2,\n        Legal1,\n        Legal2,\n        Own2,\n        Payment2,\n        Software2\n      });\n\n      //Handle Tick for each Category\n      // Count ticks by filtering arrays for \"✅\" entries\n      const scopeCount = [quotes.quote16.type, quotes.quote10.type].filter(x => x === \"✅\").length;\n      const softwareCount = [quotes.quote22.type, quotes.quote13.type].filter(x => x === \"✅\").length;\n      const paymentCount = [quotes.quote8.type, quotes.quote21.type].filter(x => x === \"✅\").length;\n      const dataSecCount = [quotes.quote17.type, quotes.quote11.type].filter(x => x === \"✅\").length;\n      const slaCount = [quotes.quote15.type, quotes.quote4.type].filter(x => x === \"✅\").length;\n      const ownCount = [quotes.quote14.type, quotes.quote20.type].filter(x => x === \"✅\").length;\n      const contractDurationCount = [quotes.quote12.type, quotes.quote7.type].filter(x => x === \"✅\").length;\n      const exitCount = [quotes.quote5.type, quotes.quote2.type].filter(x => x === \"✅\").length;\n      const legalCount = [quotes.quote18.type, quotes.quote19.type].filter(x => x === \"✅\").length;\n      const complianceCount = [quotes.quote1.type, quotes.quote9.type].filter(x => x === \"✅\").length;\n      const costCount = [quotes.quote6.type, quotes.quote3.type].filter(x => x === \"✅\").length;\n\n      //Update State\n      setCounts({\n        scope: scopeCount,\n        software: softwareCount,\n        payment: paymentCount,\n        dataSec: dataSecCount,\n        sla: slaCount,\n        own: ownCount,\n        contractDuration: contractDurationCount,\n        exit: exitCount,\n        legal: legalCount,\n        compliance: complianceCount,\n        cost: costCount\n      });\n\n      //Handle Tick, Cross, ? Counter \n      //Check if the data has a \"results\" property that is an array.\n\n      parsedData.results.forEach(item => {\n        console.log(item.type);\n        if (item.type === \"✅\") {\n          tick += 1;\n        } else if (item.type === \"❌\") {\n          cross += 1;\n        } else {\n          question += 1;\n        }\n      });\n      setCountCat({\n        tick,\n        cross,\n        question: question\n      });\n    } catch (error) {\n      //If there is no API avaible, enable AI Analyze Button\n      setHasClicked(false);\n      console.log(\"Error:\", error);\n    }\n  };\n\n  //GET date of AI results creation\n  const handleAiDateResult = async () => {\n    const ContractRunAiDateUrl = `http://localhost:5001/api/contract-checker/get-contractRunAiDate?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    const ResponseRunAiDate = await fetch(ContractRunAiDateUrl, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const RunAiDateResult = await ResponseRunAiDate.text();\n    console.log(RunAiDateResult);\n    setDate(RunAiDateResult);\n    setHasClicked(true);\n  };\n\n  //Get AvgScore , start once\n  useEffect(() => {\n    handleGetAvgScore();\n    handleGetContractClasses();\n    handleAiDateResult();\n  }, []);\n  const handleClick = async () => {\n    try {\n      //Disable AI Start Button\n      setHasClicked(true);\n\n      //Start AI\n      setIsLoading(true);\n      console.log(\"Start AI\");\n      const success = await fetch(\"http://localhost:5001/api/contract-checker/post-contractAiStart\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          selectionSoftwareProductDocumentId: selectionSoftwareProductDocumentId\n        })\n      });\n\n      //Get AvgScore if AI ran\n      if (success) {\n        handleGetAvgScore();\n        handleGetContractClasses();\n        handleAiDateResult();\n      }\n    } catch (error) {\n      console.log(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n      console.log(\"Done\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"bg-white h-16 flex items-center justify-between px-4 border-b-2 border-primary2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-row items-center gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"font-sans text-sm\",\n        children: [\"Date created: \", dateValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"font-sans text-sm\",\n        children: \"contract.pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        disabled: isLoading || hasClicked,\n        className: `${hasClicked ? 'bg-gray-400' : 'bg-black'} w-48 h-10 rounded-lg text-white font-sans`,\n        children: \"Ai Analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 9\n  }, this);\n}\n_s(Navbar, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","Navbar","setAvgScore","setDate","date","setHasClicked","hasClicked","setIsLoading","isLoading","setAiResults","setCounts","setCountCat","_s","dateValue","selectionSoftwareProductDocumentId","localStorage","getItem","handleGetAvgScore","AvgScoreUrl","responseAvg","fetch","method","headers","data","text","parseFloat","console","log","handleGetContractClasses","tick","cross","question","ContractClassesUrl","ResponseContractClasses","DataContractClassesText","parsedData","JSON","parse","quotes","results","forEach","item","index","quote","type","category","getQuoteSafely","quoteKey","Compliance1","Exit1","Cost1","Sla1","Exit2","Cost2","ContractDuration1","Payment1","Compliance2","Scope1","DataSec1","ContractDuration2","Software1","Own1","Sla2","Scope2","DataSec2","Legal1","Legal2","Own2","Payment2","Software2","scopeCount","quote16","quote10","filter","x","length","softwareCount","quote22","quote13","paymentCount","quote8","quote21","dataSecCount","quote17","quote11","slaCount","quote15","quote4","ownCount","quote14","quote20","contractDurationCount","quote12","quote7","exitCount","quote5","quote2","legalCount","quote18","quote19","complianceCount","quote1","quote9","costCount","quote6","quote3","scope","software","payment","dataSec","sla","own","contractDuration","exit","legal","compliance","cost","error","handleAiDateResult","ContractRunAiDateUrl","ResponseRunAiDate","RunAiDateResult","handleClick","success","body","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/philipp/Documents/intership-projects-2025-main/frontend/src/features/Navbar.tsx"],"sourcesContent":["import { useEffect} from 'react';\n\ninterface CategoryCounts {\n    scope: number;\n    software: number;\n    payment: number;\n    dataSec: number;\n    sla: number;\n    own: number;\n    contractDuration: number;\n    exit: number;\n    legal: number;\n    compliance: number;\n    cost: number;\n  }\n\ninterface CountCat {\n    tick: number;\n    cross: number;\n    question: number;\n}\n\ninterface aiResults {\n    Compliance1: string;\n    Exit1: string;\n    Cost1: string;\n    Sla1: string;\n    Exit2: string;\n    Cost2: string;\n    ContractDuration1: string;\n    Payment1: string;\n    Compliance2: string;\n    Scope1: string;\n    DataSec1: string;\n    ContractDuration2: string;\n    Software1: string;\n    Own1: string;\n    Sla2: string;\n    Scope2: string;\n    DataSec2: string;\n    Legal1: string;\n    Legal2: string;\n    Own2: string;\n    Payment2: string;\n    Software2: string;\n  }\n  \n\ninterface NavbarProps {\n    setAvgScore: (score: number) => void;\n    setDate: (date: string) => void;\n    date: string;\n    setHasClicked: (click: boolean) => void;\n    hasClicked: boolean;\n    setIsLoading: (loading:boolean) => void;\n    isLoading: boolean;\n\n    setCountCat: (cat: CountCat) => void;\n    setAiResults: (ai: aiResults) => void;\n    setCounts: (counts: CategoryCounts) => void;\n\n}\n\nfunction Navbar ({\n    setAvgScore, setDate, date, setHasClicked, hasClicked, setIsLoading, isLoading,\n   setAiResults, setCounts, setCountCat\n}: NavbarProps,) {\n\n    //Date standard Value\n    let dateValue = 'No date available';\n    if (date) {\n        dateValue = date;\n    }\n\n    //Get Doc ID\n    const selectionSoftwareProductDocumentId = localStorage.getItem(\"selectionSoftwareProductDocumentId\");\n\n\n    \n\n\n    //GET Avg Score via Query String \n    const handleGetAvgScore = async () => {\n        const AvgScoreUrl = `http://localhost:5001/api/contract-checker/get-contractAvgScore?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    \n        const responseAvg = await fetch(AvgScoreUrl, {\n            method: \"GET\",\n            headers: {\n            \"Content-Type\": \"application/json\",\n            },\n        })\n        const data = await responseAvg.text();\n        //Update State\n        setAvgScore(parseFloat(data));\n        console.log(data);\n    }\n\n    //GET Count Catergories\n    const handleGetContractClasses = async () => {\n        //Variables for ✅, ❌, and ❓\n        let tick = 0;\n        let cross = 0;\n        let question = 0;\n\n        const ContractClassesUrl = `http://localhost:5001/api/contract-checker/get-contractClasses?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n\n        try {\n\n\n            const ResponseContractClasses = await fetch(ContractClassesUrl, {\n                method: \"GET\",\n                headers: {\n                \"Content-Type\": \"application/json\",\n                },\n            })\n            const DataContractClassesText = await ResponseContractClasses.text();\n            const parsedData = JSON.parse(DataContractClassesText);\n            console.log(\"Parsed data:\", parsedData);\n    \n            //Handle AI Results\n    \n            // Create quotes object dynamically\n            const quotes: Record<string, { quote: string; type: string; category: string }> = {};\n\n            parsedData.results.forEach((item: any, index: number) => {\n            quotes[`quote${index + 1}`] = {\n                quote: item.quote,\n                type: item.type,\n                category: item.category,\n            };\n            });\n\n            // Helper function for safe retrieval\n            const getQuoteSafely = (index: number): string => {\n            const quoteKey = `quote${index}`;\n            return quotes[quoteKey]\n                ? `${quotes[quoteKey].type} ${quotes[quoteKey].quote}`\n                : 'No data available';\n            };\n\n            // Now assign variables safely\n            const Compliance1 = getQuoteSafely(1);\n            const Exit1 = getQuoteSafely(2);\n            const Cost1 = getQuoteSafely(3);\n            const Sla1 = getQuoteSafely(4);\n            const Exit2 = getQuoteSafely(5);\n            const Cost2 = getQuoteSafely(6);\n            const ContractDuration1 = getQuoteSafely(7);\n            const Payment1 = getQuoteSafely(8);\n            const Compliance2 = getQuoteSafely(9);\n            const Scope1 = getQuoteSafely(10);\n            const DataSec1 = getQuoteSafely(11);\n            const ContractDuration2 = getQuoteSafely(12);\n            const Software1 = getQuoteSafely(13);\n            const Own1 = getQuoteSafely(14);\n            const Sla2 = getQuoteSafely(15);\n            const Scope2 = getQuoteSafely(16);\n            const DataSec2 = getQuoteSafely(17);\n            const Legal1 = getQuoteSafely(18);\n            const Legal2 = getQuoteSafely(19);\n            const Own2 = getQuoteSafely(20);\n            const Payment2 = getQuoteSafely(21);\n            const Software2 = getQuoteSafely(22);\n\n\n    \n            //Set AI Result \n            setAiResults({\n                Compliance1,      \n                Exit1,\n                Cost1,\n                Sla1,\n                Exit2,\n                Cost2,\n                ContractDuration1,\n                Payment1,\n                Compliance2,\n                Scope1,\n                DataSec1,\n                ContractDuration2,\n                Software1,\n                Own1,\n                Sla2,\n                Scope2,\n                DataSec2,\n                Legal1,\n                Legal2,\n                Own2,\n                Payment2,\n                Software2,\n              });\n              \n                    \n    \n    \n           //Handle Tick for each Category\n           // Count ticks by filtering arrays for \"✅\" entries\n            const scopeCount = [quotes.quote16.type, quotes.quote10.type].filter(x => x === \"✅\").length;\n            const softwareCount = [quotes.quote22.type, quotes.quote13.type].filter(x => x === \"✅\").length;\n            const paymentCount = [quotes.quote8.type, quotes.quote21.type].filter(x => x === \"✅\").length;\n            const dataSecCount = [quotes.quote17.type, quotes.quote11.type].filter(x => x === \"✅\").length;\n            const slaCount = [quotes.quote15.type, quotes.quote4.type].filter(x => x === \"✅\").length;\n            const ownCount = [quotes.quote14.type, quotes.quote20.type].filter(x => x === \"✅\").length;\n            const contractDurationCount = [quotes.quote12.type, quotes.quote7.type].filter(x => x === \"✅\").length;\n            const exitCount = [quotes.quote5.type, quotes.quote2.type].filter(x => x === \"✅\").length;\n            const legalCount = [quotes.quote18.type, quotes.quote19.type].filter(x => x === \"✅\").length;\n            const complianceCount = [quotes.quote1.type, quotes.quote9.type].filter(x => x === \"✅\").length;\n            const costCount = [quotes.quote6.type, quotes.quote3.type].filter(x => x === \"✅\").length;\n\n            //Update State\n            setCounts({\n                scope: scopeCount,\n                software: softwareCount,\n                payment: paymentCount,\n                dataSec: dataSecCount,\n                sla: slaCount,\n                own: ownCount,\n                contractDuration: contractDurationCount,\n                exit: exitCount,\n                legal: legalCount,\n                compliance: complianceCount,\n                cost: costCount,\n              });\n\n\n\n            //Handle Tick, Cross, ? Counter \n            //Check if the data has a \"results\" property that is an array.\n\n            \n\n            parsedData.results.forEach((item: any) => {\n                console.log(item.type);\n                if (item.type === \"✅\") {\n                    tick += 1;\n                } else if (item.type === \"❌\") {\n                    cross += 1;\n                } else {\n                    question += 1;\n                }\n            });\n            \n           \n            setCountCat({\n                tick,\n                cross,\n                question: question\n            })\n           \n        } catch (error) {\n\n            //If there is no API avaible, enable AI Analyze Button\n            setHasClicked(false);\n\n            console.log(\"Error:\", error);\n        }\n        \n    }\n\n\n    //GET date of AI results creation\n    const handleAiDateResult = async () => {\n        const ContractRunAiDateUrl = `http://localhost:5001/api/contract-checker/get-contractRunAiDate?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n\n        const ResponseRunAiDate = await fetch(ContractRunAiDateUrl, {\n            method: \"GET\",\n            headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        const RunAiDateResult = await ResponseRunAiDate.text();\n        console.log(RunAiDateResult);\n        setDate(RunAiDateResult);\n        setHasClicked(true);\n    }\n\n\n\n    //Get AvgScore , start once\n    useEffect(() => {\n        handleGetAvgScore();\n        handleGetContractClasses();\n        handleAiDateResult();\n\n    }, [])\n\n\n    const handleClick = async () => {\n        try {\n            //Disable AI Start Button\n            setHasClicked(true);\n\n\n            //Start AI\n            setIsLoading(true);\n            console.log(\"Start AI\")\n            const success = await fetch(\"http://localhost:5001/api/contract-checker/post-contractAiStart\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ selectionSoftwareProductDocumentId: selectionSoftwareProductDocumentId }),\n            });\n            \n            //Get AvgScore if AI ran\n            if (success) {\n                handleGetAvgScore()\n                handleGetContractClasses();\n                handleAiDateResult();\n            }\n       \n        } catch (error) {\n            console.log(\"Error:\", error)\n\n        } finally {\n            setIsLoading(false)\n            console.log(\"Done\")\n        }\n    };\n    \n\n\n    return (\n        <nav className=\"bg-white h-16 flex items-center justify-between px-4 border-b-2 border-primary2\">\n            <div className=\"flex flex-row items-center gap-6\">\n                <h2 className=\"font-sans text-sm\">Date created: {dateValue}</h2>\n                <h2 className=\"font-sans text-sm\">contract.pdf</h2>\n            </div>\n            <div>\n                <button onClick={handleClick} disabled={isLoading || hasClicked} className={`${hasClicked ? 'bg-gray-400' : 'bg-black'} w-48 h-10 rounded-lg text-white font-sans`}>Ai Analyze</button>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
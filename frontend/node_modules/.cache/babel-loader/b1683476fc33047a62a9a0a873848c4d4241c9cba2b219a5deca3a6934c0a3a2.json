{"ast":null,"code":"var _jsxFileName = \"/Users/philipp/Documents/intership-projects-2025-main/frontend/src/features/Navbar.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Navbar({\n  setAvgScore,\n  setDate,\n  date,\n  setHasClicked,\n  hasClicked,\n  setIsLoading,\n  isLoading,\n  setAiResults,\n  setCounts,\n  setCountCat\n}) {\n  _s();\n  //Date standard Value\n  let dateValue = 'No date available';\n  if (date) {\n    dateValue = date;\n  }\n\n  //Get Doc ID\n  const selectionSoftwareProductDocumentId = localStorage.getItem(\"selectionSoftwareProductDocumentId\");\n\n  //GET Avg Score via Query String \n  const handleGetAvgScore = async () => {\n    const AvgScoreUrl = `http://localhost:5001/api/contract-checker/get-contractAvgScore?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    const responseAvg = await fetch(AvgScoreUrl, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await responseAvg.text();\n    //Update State\n    setAvgScore(parseFloat(data));\n    console.log(data);\n  };\n\n  //GET Count Catergories\n  const handleGetContractClasses = async () => {\n    //Variables for ✅, ❌, and ❓\n    let tick = 0;\n    let cross = 0;\n    let question = 0;\n    const ContractClassesUrl = `http://localhost:5001/api/contract-checker/get-contractClasses?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    try {\n      const ResponseContractClasses = await fetch(ContractClassesUrl, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const DataContractClassesText = await ResponseContractClasses.text();\n      const parsedData = JSON.parse(DataContractClassesText);\n      console.log(\"Parsed data:\", parsedData);\n      const categorizedQuotes = {};\n\n      // Organize quotes by category dynamically\n      parsedData.results.forEach(item => {\n        if (!categorizedQuotes[item.category]) {\n          categorizedQuotes[item.category] = [];\n        }\n        categorizedQuotes[item.category].push(item);\n      });\n\n      // Helper function to safely access quotes by category\n      const getQuote = (category, index) => {\n        const quotesArray = categorizedQuotes[category];\n        return quotesArray && quotesArray[index] ? `${quotesArray[index].type} ${quotesArray[index].quote}` : \"No data available\";\n      };\n\n      // Correctly fetching quotes by category and index\n      const Software1 = getQuote(\"Software Features and Functionality\", 0);\n      const Software2 = getQuote(\"Software Features and Functionality\", 1);\n      const Payment1 = getQuote(\"Payment Terms\", 0);\n      const Payment2 = getQuote(\"Payment Terms\", 1);\n      const Legal1 = getQuote(\"Legal Review\", 0);\n      const Legal2 = getQuote(\"Legal Review\", 1);\n      const SLA1 = getQuote(\"Service Level Agreements (SLAs)\", 0);\n      const SLA2 = getQuote(\"Service Level Agreements (SLAs)\", 1);\n      const Scope1 = getQuote(\"Scope of Work\", 0);\n      const Scope2 = getQuote(\"Scope of Work\", 1);\n      const Compliance1 = getQuote(\"Compliance\", 0);\n      const Compliance2 = getQuote(\"Compliance\", 1);\n      const Cost1 = getQuote(\"Cost Breakdown\", 0);\n      const Cost2 = getQuote(\"Cost Breakdown\", 1);\n      const Ownership1 = getQuote(\"Ownership and Intellectual Property Rights\", 0);\n      const Ownership2 = getQuote(\"Ownership and Intellectual Property Rights\", 1);\n      const ContractDuration1 = getQuote(\"Contract Duration and Renewal Terms\", 0);\n      const ContractDuration2 = getQuote(\"Contract Duration and Renewal Terms\", 1);\n      const ExitStrategy1 = getQuote(\"Exit Strategy\", 0);\n\n      // Debug Examples\n      console.log(\"Software 1:\", Software1);\n      console.log(\"Software 2:\", Software2);\n      console.log(\"Payment 1:\", Payment1);\n      console.log(\"Payment 2:\", Payment2);\n      console.log(\"Legal 1:\", Legal1);\n      console.log(\"Legal 2:\", Legal2);\n      console.log(\"SLA 1:\", SLA1);\n      console.log(\"SLA 2:\", SLA2);\n      console.log(\"Scope 1:\", Scope1);\n      console.log(\"Scope 2:\", Scope2);\n      console.log(\"Compliance 1:\", Compliance1);\n      console.log(\"Compliance 2:\", Compliance2);\n      console.log(\"Cost 1:\", Cost1);\n      console.log(\"Cost 2:\", Cost2);\n      console.log(\"Ownership 1:\", Ownership1);\n      console.log(\"Ownership 2:\", Ownership2);\n      console.log(\"Contract Duration 1:\", ContractDuration1);\n      console.log(\"Contract Duration 2:\", ContractDuration2);\n      console.log(\"Exit Strategy 1:\", ExitStrategy1);\n\n      //Set AI Result \n      setAiResults({\n        Compliance1,\n        Exit1,\n        Cost1,\n        Sla1,\n        Exit2,\n        Cost2,\n        ContractDuration1,\n        Payment1,\n        Compliance2,\n        Scope1,\n        DataSec1,\n        ContractDuration2,\n        Software1,\n        Own1,\n        Sla2,\n        Scope2,\n        DataSec2,\n        Legal1,\n        Legal2,\n        Own2,\n        Payment2,\n        Software2\n      });\n\n      //Handle Tick for each Category\n      // Count ticks by filtering arrays for \"✅\" entries\n      // Helper function to safely count ticks per category\n      const countTicks = category => {\n        return (categorizedQuotes[category] || []).filter(item => item.type === \"✅\").length;\n      };\n\n      // Counting ticks clearly by category\n      const scopeCount = countTicks(\"Scope\");\n      const softwareCount = countTicks(\"Software\");\n      const paymentCount = countTicks(\"Payment\");\n      const dataSecCount = countTicks(\"Data Security\");\n      const slaCount = countTicks(\"SLA\");\n      const ownCount = countTicks(\"Ownership\");\n      const contractDurationCount = countTicks(\"Contract Duration\");\n      const exitCount = countTicks(\"Exit\");\n      const legalCount = countTicks(\"Legal\");\n      const complianceCount = countTicks(\"Compliance\");\n      const costCount = countTicks(\"Cost\");\n\n      //Update State\n      setCounts({\n        scope: scopeCount,\n        software: softwareCount,\n        payment: paymentCount,\n        dataSec: dataSecCount,\n        sla: slaCount,\n        own: ownCount,\n        contractDuration: contractDurationCount,\n        exit: exitCount,\n        legal: legalCount,\n        compliance: complianceCount,\n        cost: costCount\n      });\n\n      //Handle Tick, Cross, ? Counter \n      //Check if the data has a \"results\" property that is an array.\n\n      parsedData.results.forEach(item => {\n        console.log(item.type);\n        if (item.type === \"✅\") {\n          tick += 1;\n        } else if (item.type === \"❌\") {\n          cross += 1;\n        } else {\n          question += 1;\n        }\n      });\n      setCountCat({\n        tick,\n        cross,\n        question: question\n      });\n    } catch (error) {\n      //If there is no API avaible, enable AI Analyze Button\n      setHasClicked(false);\n      console.log(\"Error:\", error);\n    }\n  };\n\n  //GET date of AI results creation\n  const handleAiDateResult = async () => {\n    const ContractRunAiDateUrl = `http://localhost:5001/api/contract-checker/get-contractRunAiDate?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    const ResponseRunAiDate = await fetch(ContractRunAiDateUrl, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const RunAiDateResult = await ResponseRunAiDate.text();\n    console.log(RunAiDateResult);\n    setDate(RunAiDateResult);\n    setHasClicked(true);\n  };\n\n  //Get AvgScore , start once\n  useEffect(() => {\n    handleGetAvgScore();\n    handleGetContractClasses();\n    handleAiDateResult();\n  }, []);\n  const handleClick = async () => {\n    try {\n      //Disable AI Start Button\n      setHasClicked(true);\n\n      //Start AI\n      setIsLoading(true);\n      console.log(\"Start AI\");\n      const success = await fetch(\"http://localhost:5001/api/contract-checker/post-contractAiStart\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          selectionSoftwareProductDocumentId: selectionSoftwareProductDocumentId\n        })\n      });\n\n      //Get AvgScore if AI ran\n      if (success) {\n        handleGetAvgScore();\n        handleGetContractClasses();\n        handleAiDateResult();\n      }\n    } catch (error) {\n      console.log(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n      console.log(\"Done\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"bg-white h-16 flex items-center justify-between px-4 border-b-2 border-primary2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-row items-center gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"font-sans text-sm\",\n        children: [\"Date created: \", dateValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"font-sans text-sm\",\n        children: \"contract.pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        disabled: isLoading || hasClicked,\n        className: `${hasClicked ? 'bg-gray-400' : 'bg-black'} w-48 h-10 rounded-lg text-white font-sans`,\n        children: \"Ai Analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 9\n  }, this);\n}\n_s(Navbar, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","Navbar","setAvgScore","setDate","date","setHasClicked","hasClicked","setIsLoading","isLoading","setAiResults","setCounts","setCountCat","_s","dateValue","selectionSoftwareProductDocumentId","localStorage","getItem","handleGetAvgScore","AvgScoreUrl","responseAvg","fetch","method","headers","data","text","parseFloat","console","log","handleGetContractClasses","tick","cross","question","ContractClassesUrl","ResponseContractClasses","DataContractClassesText","parsedData","JSON","parse","categorizedQuotes","results","forEach","item","category","push","getQuote","index","quotesArray","type","quote","Software1","Software2","Payment1","Payment2","Legal1","Legal2","SLA1","SLA2","Scope1","Scope2","Compliance1","Compliance2","Cost1","Cost2","Ownership1","Ownership2","ContractDuration1","ContractDuration2","ExitStrategy1","Exit1","Sla1","Exit2","DataSec1","Own1","Sla2","DataSec2","Own2","countTicks","filter","length","scopeCount","softwareCount","paymentCount","dataSecCount","slaCount","ownCount","contractDurationCount","exitCount","legalCount","complianceCount","costCount","scope","software","payment","dataSec","sla","own","contractDuration","exit","legal","compliance","cost","error","handleAiDateResult","ContractRunAiDateUrl","ResponseRunAiDate","RunAiDateResult","handleClick","success","body","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/philipp/Documents/intership-projects-2025-main/frontend/src/features/Navbar.tsx"],"sourcesContent":["import { useEffect} from 'react';\n\ninterface CategoryCounts {\n    scope: number;\n    software: number;\n    payment: number;\n    dataSec: number;\n    sla: number;\n    own: number;\n    contractDuration: number;\n    exit: number;\n    legal: number;\n    compliance: number;\n    cost: number;\n  }\n\ninterface CountCat {\n    tick: number;\n    cross: number;\n    question: number;\n}\n\ninterface aiResults {\n    Compliance1: string;\n    Exit1: string;\n    Cost1: string;\n    Sla1: string;\n    Exit2: string;\n    Cost2: string;\n    ContractDuration1: string;\n    Payment1: string;\n    Compliance2: string;\n    Scope1: string;\n    DataSec1: string;\n    ContractDuration2: string;\n    Software1: string;\n    Own1: string;\n    Sla2: string;\n    Scope2: string;\n    DataSec2: string;\n    Legal1: string;\n    Legal2: string;\n    Own2: string;\n    Payment2: string;\n    Software2: string;\n  }\n  \n\ninterface NavbarProps {\n    setAvgScore: (score: number) => void;\n    setDate: (date: string) => void;\n    date: string;\n    setHasClicked: (click: boolean) => void;\n    hasClicked: boolean;\n    setIsLoading: (loading:boolean) => void;\n    isLoading: boolean;\n\n    setCountCat: (cat: CountCat) => void;\n    setAiResults: (ai: aiResults) => void;\n    setCounts: (counts: CategoryCounts) => void;\n\n}\n\nfunction Navbar ({\n    setAvgScore, setDate, date, setHasClicked, hasClicked, setIsLoading, isLoading,\n   setAiResults, setCounts, setCountCat\n}: NavbarProps,) {\n\n    //Date standard Value\n    let dateValue = 'No date available';\n    if (date) {\n        dateValue = date;\n    }\n\n    //Get Doc ID\n    const selectionSoftwareProductDocumentId = localStorage.getItem(\"selectionSoftwareProductDocumentId\");\n\n\n    \n\n\n    //GET Avg Score via Query String \n    const handleGetAvgScore = async () => {\n        const AvgScoreUrl = `http://localhost:5001/api/contract-checker/get-contractAvgScore?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n    \n        const responseAvg = await fetch(AvgScoreUrl, {\n            method: \"GET\",\n            headers: {\n            \"Content-Type\": \"application/json\",\n            },\n        })\n        const data = await responseAvg.text();\n        //Update State\n        setAvgScore(parseFloat(data));\n        console.log(data);\n    }\n\n    //GET Count Catergories\n    const handleGetContractClasses = async () => {\n        //Variables for ✅, ❌, and ❓\n        let tick = 0;\n        let cross = 0;\n        let question = 0;\n\n        const ContractClassesUrl = `http://localhost:5001/api/contract-checker/get-contractClasses?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n\n        try {\n\n\n            const ResponseContractClasses = await fetch(ContractClassesUrl, {\n                method: \"GET\",\n                headers: {\n                \"Content-Type\": \"application/json\",\n                },\n            })\n            const DataContractClassesText = await ResponseContractClasses.text();\n            const parsedData = JSON.parse(DataContractClassesText);\n            console.log(\"Parsed data:\", parsedData);\n    \n            type Quote = {\n                score: number;\n                category: string;\n                type: string;\n                quote: string;\n              };\n              \n              const categorizedQuotes: Record<string, Quote[]> = {};\n              \n              // Organize quotes by category dynamically\n              parsedData.results.forEach((item: Quote) => {\n                if (!categorizedQuotes[item.category]) {\n                  categorizedQuotes[item.category] = [];\n                }\n                categorizedQuotes[item.category].push(item);\n              });\n              \n              // Helper function to safely access quotes by category\n              const getQuote = (category: string, index: number): string => {\n                const quotesArray = categorizedQuotes[category];\n                return quotesArray && quotesArray[index]\n                  ? `${quotesArray[index].type} ${quotesArray[index].quote}`\n                  : \"No data available\";\n              };\n              \n              // Correctly fetching quotes by category and index\n              const Software1 = getQuote(\"Software Features and Functionality\", 0);\n              const Software2 = getQuote(\"Software Features and Functionality\", 1);\n              \n              const Payment1 = getQuote(\"Payment Terms\", 0);\n              const Payment2 = getQuote(\"Payment Terms\", 1);\n              \n              const Legal1 = getQuote(\"Legal Review\", 0);\n              const Legal2 = getQuote(\"Legal Review\", 1);\n              \n              const SLA1 = getQuote(\"Service Level Agreements (SLAs)\", 0);\n              const SLA2 = getQuote(\"Service Level Agreements (SLAs)\", 1);\n              \n              const Scope1 = getQuote(\"Scope of Work\", 0);\n              const Scope2 = getQuote(\"Scope of Work\", 1);\n              \n              const Compliance1 = getQuote(\"Compliance\", 0);\n              const Compliance2 = getQuote(\"Compliance\", 1);\n              \n              const Cost1 = getQuote(\"Cost Breakdown\", 0);\n              const Cost2 = getQuote(\"Cost Breakdown\", 1);\n              \n              const Ownership1 = getQuote(\"Ownership and Intellectual Property Rights\", 0);\n              const Ownership2 = getQuote(\"Ownership and Intellectual Property Rights\", 1);\n              \n              const ContractDuration1 = getQuote(\"Contract Duration and Renewal Terms\", 0);\n              const ContractDuration2 = getQuote(\"Contract Duration and Renewal Terms\", 1);\n              \n              const ExitStrategy1 = getQuote(\"Exit Strategy\", 0);\n              \n              // Debug Examples\n              console.log(\"Software 1:\", Software1);\n              console.log(\"Software 2:\", Software2);\n              console.log(\"Payment 1:\", Payment1);\n              console.log(\"Payment 2:\", Payment2);\n              console.log(\"Legal 1:\", Legal1);\n              console.log(\"Legal 2:\", Legal2);\n              console.log(\"SLA 1:\", SLA1);\n              console.log(\"SLA 2:\", SLA2);\n              console.log(\"Scope 1:\", Scope1);\n              console.log(\"Scope 2:\", Scope2);\n              console.log(\"Compliance 1:\", Compliance1);\n              console.log(\"Compliance 2:\", Compliance2);\n              console.log(\"Cost 1:\", Cost1);\n              console.log(\"Cost 2:\", Cost2);\n              console.log(\"Ownership 1:\", Ownership1);\n              console.log(\"Ownership 2:\", Ownership2);\n              console.log(\"Contract Duration 1:\", ContractDuration1);\n              console.log(\"Contract Duration 2:\", ContractDuration2);\n              console.log(\"Exit Strategy 1:\", ExitStrategy1);\n\n\n    \n            //Set AI Result \n            setAiResults({\n                Compliance1,      \n                Exit1,\n                Cost1,\n                Sla1,\n                Exit2,\n                Cost2,\n                ContractDuration1,\n                Payment1,\n                Compliance2,\n                Scope1,\n                DataSec1,\n                ContractDuration2,\n                Software1,\n                Own1,\n                Sla2,\n                Scope2,\n                DataSec2,\n                Legal1,\n                Legal2,\n                Own2,\n                Payment2,\n                Software2,\n              });\n              \n                    \n    \n    \n           //Handle Tick for each Category\n           // Count ticks by filtering arrays for \"✅\" entries\n            // Helper function to safely count ticks per category\n            const countTicks = (category: string): number => {\n                return (categorizedQuotes[category] || [])\n                .filter(item => item.type === \"✅\")\n                .length;\n            };\n            \n            // Counting ticks clearly by category\n            const scopeCount = countTicks(\"Scope\");\n            const softwareCount = countTicks(\"Software\");\n            const paymentCount = countTicks(\"Payment\");\n            const dataSecCount = countTicks(\"Data Security\");\n            const slaCount = countTicks(\"SLA\");\n            const ownCount = countTicks(\"Ownership\");\n            const contractDurationCount = countTicks(\"Contract Duration\");\n            const exitCount = countTicks(\"Exit\");\n            const legalCount = countTicks(\"Legal\");\n            const complianceCount = countTicks(\"Compliance\");\n            const costCount = countTicks(\"Cost\");\n\n            //Update State\n            setCounts({\n                scope: scopeCount,\n                software: softwareCount,\n                payment: paymentCount,\n                dataSec: dataSecCount,\n                sla: slaCount,\n                own: ownCount,\n                contractDuration: contractDurationCount,\n                exit: exitCount,\n                legal: legalCount,\n                compliance: complianceCount,\n                cost: costCount,\n              });\n\n\n\n            //Handle Tick, Cross, ? Counter \n            //Check if the data has a \"results\" property that is an array.\n\n            \n\n            parsedData.results.forEach((item: any) => {\n                console.log(item.type);\n                if (item.type === \"✅\") {\n                    tick += 1;\n                } else if (item.type === \"❌\") {\n                    cross += 1;\n                } else {\n                    question += 1;\n                }\n            });\n            \n           \n            setCountCat({\n                tick,\n                cross,\n                question: question\n            })\n           \n        } catch (error) {\n\n            //If there is no API avaible, enable AI Analyze Button\n            setHasClicked(false);\n\n            console.log(\"Error:\", error);\n        }\n        \n    }\n\n\n    //GET date of AI results creation\n    const handleAiDateResult = async () => {\n        const ContractRunAiDateUrl = `http://localhost:5001/api/contract-checker/get-contractRunAiDate?selectionSoftwareProductDocumentId=${selectionSoftwareProductDocumentId}`;\n\n        const ResponseRunAiDate = await fetch(ContractRunAiDateUrl, {\n            method: \"GET\",\n            headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        const RunAiDateResult = await ResponseRunAiDate.text();\n        console.log(RunAiDateResult);\n        setDate(RunAiDateResult);\n        setHasClicked(true);\n    }\n\n\n\n    //Get AvgScore , start once\n    useEffect(() => {\n        handleGetAvgScore();\n        handleGetContractClasses();\n        handleAiDateResult();\n\n    }, [])\n\n\n    const handleClick = async () => {\n        try {\n            //Disable AI Start Button\n            setHasClicked(true);\n\n\n            //Start AI\n            setIsLoading(true);\n            console.log(\"Start AI\")\n            const success = await fetch(\"http://localhost:5001/api/contract-checker/post-contractAiStart\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ selectionSoftwareProductDocumentId: selectionSoftwareProductDocumentId }),\n            });\n            \n            //Get AvgScore if AI ran\n            if (success) {\n                handleGetAvgScore()\n                handleGetContractClasses();\n                handleAiDateResult();\n            }\n       \n        } catch (error) {\n            console.log(\"Error:\", error)\n\n        } finally {\n            setIsLoading(false)\n            console.log(\"Done\")\n        }\n    };\n    \n\n\n    return (\n        <nav className=\"bg-white h-16 flex items-center justify-between px-4 border-b-2 border-primary2\">\n            <div className=\"flex flex-row items-center gap-6\">\n                <h2 className=\"font-sans text-sm\">Date created: {dateValue}</h2>\n                <h2 className=\"font-sans text-sm\">contract.pdf</h2>\n            </div>\n            <div>\n                <button onClick={handleClick} disabled={isLoading || hasClicked} className={`${hasClicked ? 'bg-gray-400' : 'bg-black'} w-48 h-10 rounded-lg text-white font-sans`}>Ai Analyze</button>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}